{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","memo","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","onAdd","useState","setTitle","setMovie","isLoading","setIsLoading","hasError","setHasError","handleSubmit","useCallback","e","a","preventDefault","query","fetch","then","res","json","catch","Response","Error","movieData","foundMovie","Title","Plot","Poster","imdbID","handleQuery","target","value","handleAdd","onSubmit","htmlFor","type","id","placeholder","onChange","classNames","disabled","onClick","App","setMovies","addMovie","newMovie","find","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"+TAQaA,EAA6BC,gBAAK,gBAAGC,EAAH,EAAGA,MAAH,OAC7C,sBAAKC,UAAU,OAAO,UAAQ,YAA9B,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,gBAAlB,SACE,qBACE,UAAQ,cACRC,IAAKF,EAAMG,OACXC,IAAI,kBAIV,sBAAKH,UAAU,eAAf,UACE,sBAAKA,UAAU,QAAf,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,iBAAlB,SACE,qBACEC,IAAI,wBACJE,IAAI,aAIV,qBAAKH,UAAU,gBAAf,SACE,mBAAGA,UAAU,aAAa,UAAQ,aAAlC,SAAgDD,EAAMK,aAI1D,sBAAKJ,UAAU,UAAU,UAAQ,mBAAjC,UACGD,EAAMM,YACP,uBACA,mBAAGC,KAAMP,EAAMQ,QAAS,UAAQ,WAAhC,8BC3BKC,EAA8BV,gBAAK,gBAAGW,EAAH,EAAGA,OAAH,OAC9C,qBAAKT,UAAU,SAAf,SACGS,EAAOC,KAAI,SAAAX,GAAK,OACf,cAAC,EAAD,CAEEA,MAAOA,GADFA,EAAMY,gB,+CCHZ,IAAMC,EAA6Bd,gBAAK,YAAgB,IAAbe,EAAY,EAAZA,MAChD,EAA0BC,mBAAS,IAAnC,mBAAOV,EAAP,KAAcW,EAAd,KACA,EAA0BD,mBAAuB,MAAjD,mBAAOf,EAAP,KAAciB,EAAd,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAgCJ,oBAAS,GAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KAEMC,EAAeC,sBAAW,uCAAC,WAC/BC,GAD+B,iBAAAC,EAAA,6DAG/BD,EAAEE,iBAEFP,GAAa,GALkB,SCZVQ,EDmBYtB,EClB5BuB,MAAM,GAAD,OAHE,2CAGF,cAAiBD,IAC1BE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBC,OAAM,iBAAO,CACZC,SAAU,QACVC,MAAO,uBDOsB,OAOzBC,EAPyB,OAS/BhB,GAAa,GAET,UAAWgB,EACbd,GAAY,IAENe,EAAoB,CACxB/B,MAAO8B,EAAUE,MACjB/B,YAAa6B,EAAUG,KACvBnC,OAA6B,QAArBgC,EAAUI,OACdJ,EAAUI,OACV,4DACJ/B,QAAQ,8BAAD,OAAgC2B,EAAUK,QACjD5B,OAAQuB,EAAUK,QAGpBvB,EAASmB,IAxBoB,iCCZ5B,IAAkBT,IDYU,OAAD,sDA0B7B,CAACtB,IAEEoC,EAAclB,uBAAY,SAACC,GAC/BR,EAASQ,EAAEkB,OAAOC,OAClBtB,GAAY,KACX,CAAChB,IAEEuC,EAAYrB,uBAAY,WACxBvB,IACFc,EAAMd,GACNiB,EAAS,MACTD,EAAS,IACTK,GAAY,MAEb,CAACrB,IAEJ,OACE,qCACE,uBACEC,UAAU,aACV4C,SAAUvB,EAFZ,UAIE,sBAAKrB,UAAU,QAAf,UACE,uBAAOA,UAAU,QAAQ6C,QAAQ,cAAjC,yBAIA,qBAAK7C,UAAU,UAAf,SACE,uBACE,UAAQ,aACR8C,KAAK,OACLC,GAAG,cACHC,YAAY,0BACZhD,UAAU,kBACV0C,MAAOtC,EACP6C,SAAU,SAAA1B,GAAC,OAAIiB,EAAYjB,QAI9BJ,GACC,mBAAGnB,UAAU,iBAAiB,UAAQ,eAAtC,qDAOJ,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,wBACE,UAAQ,eACR8C,KAAK,SACL9C,UAAWkD,IAAW,kBAAmB,CACvC,aAAcjC,IAEhBkC,UAAW/C,EANb,SAQGL,EAAQ,eAAiB,mBAK9B,qBAAKC,UAAU,UAAf,SACGD,GACC,wBACE,UAAQ,YACR+C,KAAK,SACL9C,UAAU,oBACVoD,QAAST,EAJX,qCAaP5C,GACC,sBAAKC,UAAU,YAAY,UAAQ,mBAAnC,UACE,oBAAIA,UAAU,QAAd,qBACA,cAAC,EAAD,CAAWD,MAAOA,aErHfsD,EAAM,WACjB,MAA4BvC,mBAAkB,IAA9C,mBAAOL,EAAP,KAAe6C,EAAf,KAEMC,EAAWjC,uBAAY,SAACkC,GACR/C,EAAOgD,MAAK,SAAA1D,GAAK,OAAIA,EAAMY,SAAW6C,EAAS7C,WAGjE2C,GAAU,SAAAI,GAAU,4BAAQA,GAAR,CAAoBF,SAEzC,CAAC/C,IAEJ,OACE,sBAAKT,UAAU,OAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CAAYS,OAAQA,MAGtB,qBAAKT,UAAU,UAAf,SACE,cAAC,EAAD,CAAWa,MAAO0C,UCpB1BI,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.63599c6e.chunk.js","sourcesContent":["import React, { memo } from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = memo(({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n));\n","import React, { memo } from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = memo(({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n));\n","import React, { useState, memo, useCallback } from 'react';\nimport './FindMovie.scss';\nimport classNames from 'classnames';\nimport { Movie } from '../../types/Movie';\nimport { MovieCard } from '../MovieCard';\nimport { getMovie } from '../../api';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nexport const FindMovie: React.FC<Props> = memo(({ onAdd }) => {\n  const [title, setTitle] = useState('');\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n\n  const handleSubmit = useCallback(async (\n    e: React.FormEvent<HTMLFormElement>,\n  ) => {\n    e.preventDefault();\n\n    setIsLoading(true);\n\n    const movieData = await getMovie(title);\n\n    setIsLoading(false);\n\n    if ('Error' in movieData) {\n      setHasError(true);\n    } else {\n      const foundMovie: Movie = {\n        title: movieData.Title,\n        description: movieData.Plot,\n        imgUrl: movieData.Poster !== 'N/A'\n          ? movieData.Poster\n          : 'https://via.placeholder.com/360x270.png?text=no%20preview',\n        imdbUrl: `https://www.imdb.com/title/${movieData.imdbID}`,\n        imdbId: movieData.imdbID,\n      };\n\n      setMovie(foundMovie);\n    }\n  }, [title]);\n\n  const handleQuery = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setHasError(false);\n  }, [title]);\n\n  const handleAdd = useCallback(() => {\n    if (movie) {\n      onAdd(movie);\n      setMovie(null);\n      setTitle('');\n      setHasError(false);\n    }\n  }, [movie]);\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={title}\n              onChange={e => handleQuery(e)}\n            />\n          </div>\n\n          {hasError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames('button is-light', {\n                'is-loading': isLoading,\n              })}\n              disabled={!title}\n            >\n              {movie ? 'Search again' : 'Find a movie'}\n            </button>\n\n          </div>\n\n          <div className=\"control\">\n            {movie && (\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={handleAdd}\n              >\n                Add to the list\n              </button>\n            )}\n          </div>\n        </div>\n      </form>\n\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n});\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=32e1aac8';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { useState, useCallback } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const addMovie = useCallback((newMovie: Movie) => {\n    const movieExists = movies.find(movie => movie.imdbId === newMovie.imdbId);\n\n    if (!movieExists) {\n      setMovies(prevMovies => [...prevMovies, newMovie]);\n    }\n  }, [movies]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}